#!/bin/sh
#
# we can be called with the following arguments (6.5 of Debian policy):
#  configure:         (our version): installing/configuring new version
#  abort-upgrade:     (old version): upgrading to a new version failed
#  abort-remove:      (our version): removing this package failed
#  abort-deconfigure: (our version): error during resolving conflicts

## @todo Do we really gain anything from not just executing everything
##       unconditionally?


if [ "$1" = "configure" ]; then

  USER_EMS_BUS=erlangms
  GROUP_EMS_BUS=erlangms
  HOME_EMS_BUS=/var/opt/erlangms
  USER_CREATED="false"

  # create user and group erlangms if it not exist
  if ! grep "^erlangms:" /etc/passwd >> /dev/null ; then
	  groupadd --system  $GROUP_EMS_BUS  > /dev/null 2>&1
	  password="admin"
	  #password_crypt=$(perl -e 'print crypt($ARGV[0], "wtf")' $password)
	  password_crypt="wtdgpkEyPdF1A"
	  useradd -g $GROUP_EMS_BUS --create-home --system \
								--home-dir $HOME_EMS_BUS \
								--shell /bin/bash \
								--password $password_crypt \
								--comment "User do barramento ERLANGMS" $USER_EMS_BUS  > /dev/null 2>&1
      echo "User erlangms created with admin passwd. Change after installation!"
      USER_CREATED="true"
  fi
  
  # The starters need to be Suid root.
  chmod 4777 /usr/lib/ems-bus/bin/ems-bus > /dev/null 2>&1
  # The starters need to be Suid root para Erts.
  for ExecutableErts in `find /usr/lib/ems-bus/erts-*/bin/`; do
      chmod 4511 $ExecutableErts > /dev/null 2>&1
  done
  

  # Configure home user (/var/opt/erlangms)
  mkdir -p $HOME_EMS_BUS/.erlangms > /dev/null 2>&1

  # Creates the configuration file only if it does not exist
  if [ ! -f /var/opt/erlangms/.erlangms/emsbus.conf ]; then
	cp /usr/lib/ems-bus/priv/conf/emsbus.conf $HOME_EMS_BUS/.erlangms/ > /dev/null 2>&1
  fi
  ln -s /usr/lib/ems-bus $HOME_EMS_BUS/ems-bus > /dev/null 2>&1 || true
  #ln -s /usr/lib/ems-bus/priv/ $HOME_EMS_BUS/ems-bus/priv > /dev/null 2>&1 || true
  ln -s /usr/lib/ems-bus/priv $HOME_EMS_BUS/priv > /dev/null 2>&1 || true
  ln -s /usr/lib/ems-bus/priv/log /var/log/ems-bus > /dev/null 2>&1
 

  # It only changes the $ HOME_EMS_BUS/.odbc.ini file when the user was created
  if [ "$USER_CREATED" = "true" ]; then
	  rm -f $HOME_EMS_BUS/.odbc.ini
	  cp /usr/lib/ems-bus/priv/conf/odbc.ini $HOME_EMS_BUS/.odbc.ini
  fi
  
  chown -Rf $USER_EMS_BUS:$GROUP_EMS_BUS /var/opt/erlangms > /dev/null 2>&1	
  chown -Rf $USER_EMS_BUS:$GROUP_EMS_BUS /var/opt/erlangms/.erlangms > /dev/null 2>&1	

  # Create .hosts.erlang if it not exist
  if [ ! -f $HOME_EMS_BUS/.hosts.erlang ]; then
	echo \'$(hostname | cut -d. -f1)\'. > $HOME_EMS_BUS/.hosts.erlang 
  fi
  
  # Iptables firewall
  #iptables -C INPUT -p tcp -m multiport --dports 2301,2302,2389 -j ACCEPT 2> /dev/null
  #if [ "$?" -eq "1" ]; then
  #    iptables -A INPUT -p tcp -m multiport --dports 2301,2302,2389 -j ACCEPT  > /dev/null 2>&1 || true
  #fi

  # Change owners to erlangms:erlangms
  chown -Rf $USER_EMS_BUS:$GROUP_EMS_BUS /usr/lib/ems-bus > /dev/null 2>&1
  chown -Rf $USER_EMS_BUS:$GROUP_EMS_BUS /etc/ems-bus > /dev/null 2>&1
  chown -Rf $USER_EMS_BUS:$GROUP_EMS_BUS /var/log/ems-bus > /dev/null 2>&1
  chown -Rf $USER_EMS_BUS:$GROUP_EMS_BUS /var/opt/erlangms > /dev/null 2>&1
  chown -f $USER_EMS_BUS:$GROUP_EMS_BUS /usr/bin/ems-bus > /dev/null 2>&1

  # Change owners to root:root
  chown root:root /etc/sudoers.d/ems-bus.sudoers > /dev/null 2>&1
  chown root:root /etc/systemd/system/ems-bus.service > /dev/null 2>&1
  chown -Rf root:root /etc/systemd/system/ems-bus.service.d > /dev/null 2>&1


  # Config /etc/odbcinst.ini if necessary for FreeTDS SQL-server driver
  JTDS_ENTRY_CONF=$(sed -rn '/\[FreeTDS\]/, /(^$|^#)/p' /etc/odbcinst.ini 2> /dev/null)
  if [ -z "$JTDS_ENTRY_CONF" ]; then
	updatedb
	LIB_TDODBC_PATH=$(locate libtdsodbc.so | sed -n '1p')
	if [ ! -z "$LIB_TDODBC_PATH" ]; then
		echo " " >> /etc/odbcinst.ini 
		echo "# Driver for SQL-server" >> /etc/odbcinst.ini 
		echo "# Setup from the ems-bus package" >> /etc/odbcinst.ini 
		echo "[FreeTDS]" >> /etc/odbcinst.ini 
		echo "Description=FreeTDS Driver" >> /etc/odbcinst.ini 
		echo "Driver=$LIB_TDODBC_PATH" >> /etc/odbcinst.ini 
		echo " " >> /etc/odbcinst.ini 
	fi
  fi

  # Config /etc/security/limits.conf if necessary for erlangms group
  if ! grep -q '@erlangms' /etc/security/limits.conf ; then
	echo " " >> /etc/security/limits.conf
	echo "# Security for ERLANGMS ESB" >> /etc/security/limits.conf
	echo "@erlangms         hard    nofile      500000" >> /etc/security/limits.conf
	echo "@erlangms         soft    nofile      500000" >> /etc/security/limits.conf
	echo "@erlangms         hard    nproc       500000" >> /etc/security/limits.conf
	echo "@erlangms         soft    nproc       500000" >> /etc/security/limits.conf
	echo "" >> /etc/security/limits.conf
	sed -ri '/^# *End of file$/d;' /etc/security/limits.conf
	sed -i '$ a # End of file' /etc/security/limits.conf	 
  fi

  # Tunning fs.file-max. At least it should be 1000000
  FILE_MAX_DEF=1000000
  FILE_MAX=$(cat /proc/sys/fs/file-max)
  if [ $FILE_MAX -lt $FILE_MAX_DEF ]; then
		# Ajusta ou adiciona o valor para fs.file-max
		if grep -q 'fs.file-max' /etc/sysctl.conf ; then
			sed -ri "s/^fs.file-max=[0-9]{1,10}$/fs.file-max=$FILE_MAX_DEF/" /etc/sysctl.conf
		else
			echo "" >> /etc/sysctl.conf
			echo "# File descriptors limit" >> /etc/sysctl.conf
			echo "fs.file-max=$FILE_MAX_DEF" >> /etc/sysctl.conf
		fi
		sysctl -p > /dev/null 2>&1
  fi

  # database backup
  mv /usr/lib/ems-bus/priv/db /usr/lib/ems-bus/priv/db_`date '+%d%m%Y_%H%M%S'`  > /dev/null 2>&1 || true

  # ldconfig
  /sbin/ldconfig  > /dev/null 2>&1 || true


  # systemd
  systemctl enable /usr/lib/ems-bus/priv/systemd/ems-bus.service  > /dev/null 2>&1 || true
  systemctl daemon-reload  > /dev/null 2>&1 || true
fi

sleep 2
systemctl start ems-bus.service  > /dev/null 2>&1 || true

exit 0
